{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/connector/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,cAAc,IAAI,eAAe,GAElC,MAAM,oBAAoB,CAAA;AAC3B,OAAO,EAAE,cAAc,IAAI,iBAAiB,EAAE,MAAM,gBAAgB,CAAA;AACpE,OAAO,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAA;AAEtE,cAAc,YAAY,CAAA;AAG1B;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAC7B,OAAO,QAAQ,KAAK,QAAQ;IAC5B,OAAO,QAAQ,CAAC,cAAc,KAAK,UAAU;IAC7C,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAA;AAuB3C;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,MAAe;IAC5C,MAAM,aAAa,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,iBAAiB,CAAA;IAE/C,IAAI,CAAC,aAAa,IAAI,kBAAkB;QAAE,OAAO,iBAAiB,EAAE,CAAA;IACpE,OAAO,eAAe,CAAC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,kBAAkB,CAAC,CAAA;AACpD,CAAC","sourcesContent":["import {\n  createScClient as smoldotScClient,\n  Config as EmbeddedNodeConfig,\n} from \"./smoldot-light.js\"\nimport { createScClient as extensionScClient } from \"./extension.js\"\nimport { DOM_ELEMENT_ID } from \"@substrate/connect-extension-protocol\"\n\nexport * from \"./types.js\"\nexport { EmbeddedNodeConfig }\n\n/**\n * `true` if the substrate-connect extension is installed and available.\n *\n * Always `false` when outside of a browser environment.\n *\n * We detect this based on the presence of a DOM element with a specific `id`. See\n * `connect-extension-protocol`.\n *\n * Note that the value is determined at initialization and will not change even if the user\n * enables, disables, installs, or uninstalls the extension while the script is running. These\n * situations are very niche, and handling them properly would add a lot of complexity that isn't\n * worth it.\n *\n * This constant is mostly for informative purposes, for example to display a message in a UI\n * encouraging the user to install the extension.\n */\nexport const isExtensionPresent =\n  typeof document === \"object\" &&\n  typeof document.getElementById === \"function\" &&\n  !!document.getElementById(DOM_ELEMENT_ID)\n\n/**\n * Configuration that can be passed to {createScClient}.\n */\nexport interface Config {\n  /**\n   * If `true`, then the client will always use a node embedded within the page and never use\n   * the substrate-connect extension.\n   *\n   * Defaults to `false`.\n   */\n  forceEmbeddedNode?: boolean\n\n  /**\n   * Configuration to use for the embedded node. Ignored if the extension is present.\n   *\n   * If you want to make sure that this configuration isn't ignored, use this option in\n   * conjunction with {Config.forceEmbeddedNode}.\n   */\n  embeddedNodeConfig?: EmbeddedNodeConfig\n}\n\n/**\n * Returns a {@link ScClient} that connects to chains, either through the substrate-connect\n * extension or by executing a light client directly from JavaScript, depending on whether the\n * extension is installed and available.\n */\nexport function createScClient(config?: Config) {\n  const forceEmbedded = config?.forceEmbeddedNode\n\n  if (!forceEmbedded && isExtensionPresent) return extensionScClient()\n  return smoldotScClient(config?.embeddedNodeConfig)\n}\n"]}