{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/connector/specs/index.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,KAAa;IACzC,8FAA8F;IAC9F,4DAA4D;IAC5D,8FAA8F;IAC9F,wFAAwF;IACxF,eAAe;IACf,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;IAErE,IAAI;QACF,MAAM,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,cAAc,GAAG,KAAK,GAAG,KAAK,CAAC,CAEtC,CAAA;QAEvB,OAAO,OAAO,OAAO,KAAK,QAAQ;YAChC,CAAC,CAAC,OAAO;YACT,CAAC,CAAE,OAA0C,CAAC,OAAO,CAAA;KACxD;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;KACtC;AACH,CAAC","sourcesContent":["export async function getSpec(chain: string): Promise<string> {\n  // We don't want API users to be able to `import` a file outside of the `generated` directory.\n  // While it is probably harmless, better be safe than sorry.\n  // This is done by make sure that the name doesn't contain `..`. This also means that we can't\n  // support well-known chain whose name contains `..`, but that seems unlikely to ever be\n  // problematic.\n  if (chain.indexOf(\"..\") !== -1) throw new Error(\"Invalid chain name\")\n\n  try {\n    const specRaw = (await import(\"./generated/\" + chain + \".js\")) as\n      | string\n      | { default: string }\n\n    return typeof specRaw === \"string\"\n      ? specRaw\n      : (specRaw as unknown as { default: string }).default\n  } catch (error) {\n    throw new Error(\"Invalid chain name\")\n  }\n}\n"]}