{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/connector/specs/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAsB,OAAO,CAAC,KAAa;;QACzC,8FAA8F;QAC9F,4DAA4D;QAC5D,8FAA8F;QAC9F,wFAAwF;QACxF,eAAe;QACf,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;QAErE,IAAI;YACF,MAAM,OAAO,GAAG,CAAC,wDAAa,cAAc,GAAG,KAAK,GAAG,KAAK,GAAC,CAEtC,CAAA;YAEvB,OAAO,OAAO,OAAO,KAAK,QAAQ;gBAChC,CAAC,CAAC,OAAO;gBACT,CAAC,CAAE,OAA0C,CAAC,OAAO,CAAA;SACxD;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;SACtC;IACH,CAAC;CAAA;AAnBD,0BAmBC","sourcesContent":["export async function getSpec(chain: string): Promise<string> {\n  // We don't want API users to be able to `import` a file outside of the `generated` directory.\n  // While it is probably harmless, better be safe than sorry.\n  // This is done by make sure that the name doesn't contain `..`. This also means that we can't\n  // support well-known chain whose name contains `..`, but that seems unlikely to ever be\n  // problematic.\n  if (chain.indexOf(\"..\") !== -1) throw new Error(\"Invalid chain name\")\n\n  try {\n    const specRaw = (await import(\"./generated/\" + chain + \".js\")) as\n      | string\n      | { default: string }\n\n    return typeof specRaw === \"string\"\n      ? specRaw\n      : (specRaw as unknown as { default: string }).default\n  } catch (error) {\n    throw new Error(\"Invalid chain name\")\n  }\n}\n"]}