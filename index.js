"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("@polkadot/util"),e=require("@polkadot/api"),n=require("@polkadot/rpc-provider/ws"),i=require("@mangata-finance/types"),a=require("mangata-prng-xoshiro"),s=require("@polkadot/util-crypto"),r=require("big.js"),o=require("uuid");function c(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var u=c(r);class l{static async getChain(t){return(await t.rpc.system.chain()).toHuman()}static async getNodeName(t){return(await t.rpc.system.name()).toHuman()}static async getNodeVersion(t){return(await t.rpc.system.version()).toHuman()}static async calculateRewardsAmount(e,n,i){const a=await e.rpc.xyk.calculate_rewards_amount(n,i);return t.isHex(a.price.toString())?t.hexToBn(a.price.toString()):new t.BN(a.price)}static async calculateBuyPrice(e,n,i,a){const s=await e.rpc.xyk.calculate_buy_price(n,i,a);return new t.BN(s.price)}static async calculateSellPrice(e,n,i,a){const s=await e.rpc.xyk.calculate_sell_price(n,i,a);return new t.BN(s.price)}static async getBurnAmount(t,e,n,i){const a=await t.rpc.xyk.get_burn_amount(e,n,i);return JSON.parse(a.toString())}static async calculateSellPriceId(e,n,i,a){const s=await e.rpc.xyk.calculate_sell_price_id(n,i,a);return new t.BN(s.price)}static async calculateBuyPriceId(e,n,i,a){const s=await e.rpc.xyk.calculate_buy_price_id(n,i,a);return new t.BN(s.price)}}class d{static instance;db={};constructor(){}static getInstance(){return d.instance||(d.instance=new d),d.instance}hasAddressNonce=t=>!!this.db[t];setNonce=(t,e)=>{this.db[t]=e};getNonce=t=>this.db[t]}const g=d.getInstance(),w=async t=>(await t.query.assetsInfo.assetsInfo.entries()).reduce(((t,[e,n])=>{const i=n.toHuman(),a=e.toHuman()[0].replace(/[, ]/g,""),s={id:a,chainId:0,symbol:i.symbol,address:"MGA"===i.symbol?"0xc7e3bda797d2ceb740308ec40142ae235e08144a":"ETH"===i.symbol?"0x0000000000000000000000000000000000000000":i.description,name:i.symbol.includes("TKN")?"Liquidity Pool Token":i.name,decimals:Number(i.decimals)};return t[a]=s,t}),{}),y=async t=>(await t.query.xyk.liquidityAssets.entries()).reduce(((t,[e,n])=>{const i=e.args.map((t=>t.toHuman()))[0],a=n.toString().replace(/[, ]/g,"");return t[i]=a,t}),{}),p=async(e,n)=>(await e.query.tokens.accounts.entries(n)).reduce(((e,[n,i])=>{const a=JSON.parse(JSON.stringify(i)).free.toString(),s=JSON.parse(JSON.stringify(i)).frozen.toString(),r=JSON.parse(JSON.stringify(i)).reserved.toString(),o={free:t.isHex(a)?t.hexToBn(a):new t.BN(a),frozen:t.isHex(s)?t.hexToBn(s):new t.BN(s),reserved:t.isHex(r)?t.hexToBn(r):new t.BN(r)};return e[n.toHuman()[1].replace(/[, ]/g,"")]=o,e}),{}),B=async e=>{const n=await w(e);return Object.values(n).filter((t=>"1"!==t.id&&"3"!==t.id)).reduce(((e,n)=>{const i={...n,symbol:n.symbol.includes("TKN")?n.symbol.split("-").reduce(((e,n)=>{const i=n.replace("TKN",""),a=i.startsWith("0x")?t.hexToBn(i).toString():i;return e.push(a),e}),[]).join("-"):n.symbol};return e[i.id]=i,e}),{})},N=new t.BN("0"),m=new t.BN("1"),h=new t.BN("10"),I=new t.BN("100"),k=new t.BN("1000"),f=new t.BN("10000"),x=new t.BN("100000"),T=new t.BN("1000000"),A=new t.BN("10000000"),S=new t.BN("100000000"),q=new t.BN("1000000000"),b=new t.BN("10000000000"),P=new t.BN("100000000000"),L=new t.BN("1000000000000"),v=new t.BN("10").pow(new t.BN(18)),_=async(e,n,i)=>{if(i.isZero())return N;const a=await e.query.tokens.totalIssuance(n),s=new t.BN(a.toString());return i.mul(v).div(s)},F=(t,e)=>e.gt(N)?F(e,t.mod(e)):t,O=(t,e)=>{const n=((t,e)=>{const n=F(t,e);return n.isZero()?[N,N]:[t.div(n),e.div(n)]})(t,e);return n[1].mul(v).div(n[0])},R=async t=>{try{return(await t.query.issuance.promotedPoolsRewards.entries()).map((([t])=>t.args.map((t=>t.toHuman()))[0]))}catch(t){return[]}};class H{static async getNonce(t,e){return(await t.rpc.system.accountNextIndex(e)).toBn()}static async getAmountOfTokenIdInPool(e,n,i){const a=await e.query.xyk.pools([n,i]),s=a[0].toString(),r=a[1].toString();return[t.isHex(s)?t.hexToBn(s):new t.BN(s),t.isHex(r)?t.hexToBn(r):new t.BN(r)]}static async getLiquidityTokenId(e,n,i){const a=await e.query.xyk.liquidityAssets([n,i]);return a.isSome?new t.BN(a.toString()):t.BN_ZERO}static async getLiquidityPool(e,n){const i=await e.query.xyk.liquidityPools(n);return i.isSome?i.unwrap().map((e=>new t.BN(e))):[new t.BN(-1),new t.BN(-1)]}static async getTotalIssuance(e,n){const i=await e.query.tokens.totalIssuance(n);return new t.BN(i)}static async getTokenBalance(e,n,i){const{free:a,reserved:s,frozen:r}=await e.query.tokens.accounts(n,i);return{free:t.isHex(a.toString())?t.hexToBn(a.toString()):new t.BN(a.toString()),reserved:t.isHex(s.toString())?t.hexToBn(s.toString()):new t.BN(s.toString()),frozen:t.isHex(r.toString())?t.hexToBn(r.toString()):new t.BN(r.toString())}}static async getNextTokenId(e){const n=await e.query.tokens.nextCurrencyId();return new t.BN(n)}static async getTokenInfo(t,e){return(await this.getAssetsInfo(t))[e]}static async getLiquidityTokenIds(t){return(await t.query.xyk.liquidityAssets.entries()).map((t=>t[1].toString()))}static async getLiquidityTokens(t){const e=await this.getAssetsInfo(t);return Object.values(e).reduce(((t,e)=>(e.name.includes("Liquidity Pool Token")&&(t[e.id]=e),t)),{})}static async getAssetsInfo(e){const n=await w(e);return Object.values(n).filter((t=>"1"!==t.id&&"3"!==t.id)).reduce(((e,i)=>{const a={...i,symbol:i.symbol.includes("TKN")?i.symbol.split("-").reduce(((e,i)=>{const a=i.replace("TKN",""),s=a.startsWith("0x")?t.hexToBn(a).toString():a,r=n[s].symbol;return e.push(r),e}),[]).join("-"):i.symbol};return e[a.id]=a,e}),{})}static async getBlockNumber(t){return(await t.rpc.chain.getBlock()).block.header.number.toString()}static async getOwnedTokens(t,e){if(!e)return null;const[n,i]=await Promise.all([this.getAssetsInfo(t),p(t,e)]);return Object.values(n).reduce(((t,e)=>(Object.keys(i).includes(e.id)&&(t[e.id]={...e,balance:i[e.id]}),t)),{})}static async getBalances(e){return(await e.query.tokens.totalIssuance.entries()).reduce(((e,[n,i])=>{const a=n.toHuman()[0].replace(/[, ]/g,""),s=new t.BN(i.toString());return e[a]=s,e}),{})}static async getInvestedPools(t,e){const[n,i,a]=await Promise.all([B(t),p(t,e),R(t)]),s=Object.values(n).reduce(((t,e)=>(Object.keys(i).includes(e.id)&&e.name.includes("Liquidity Pool Token")&&t.push(e),t)),[]).map((async e=>{const n=i[e.id],s=e.symbol.split("-")[0],r=e.symbol.split("-")[1],[o,c]=await this.getAmountOfTokenIdInPool(t,s.toString(),r.toString());return{firstTokenId:s,secondTokenId:r,firstTokenAmount:o,secondTokenAmount:c,liquidityTokenId:e.id,isPromoted:a.includes(e.id),share:await _(t,e.id,n.free.add(n.reserved)),firstTokenRatio:O(o,c),secondTokenRatio:O(c,o),activatedLPTokens:n.reserved,nonActivatedLPTokens:n.free}}));return Promise.all(s)}static async getPool(t,e){const[n,i]=await Promise.all([this.getLiquidityPool(t,e),t.query.issuance.promotedPoolsRewards(e)]),[a,s]=n,[r,o]=await this.getAmountOfTokenIdInPool(t,a.toString(),s.toString());return{firstTokenId:a.toString(),secondTokenId:s.toString(),firstTokenAmount:r,secondTokenAmount:o,liquidityTokenId:e,isPromoted:i.gtn(0),firstTokenRatio:O(r,o),secondTokenRatio:O(o,r)}}static async getPools(e){const[n,i]=await Promise.all([B(e),y(e)]),a=await(async(e,n)=>(await e.query.xyk.pools.entries()).reduce(((e,[i,a])=>{const s=i.args.map((t=>t.toHuman()))[0],r=JSON.parse(JSON.stringify(a)).map((e=>t.isHex(e)?t.hexToBn(e):new t.BN(e)));return e[n[s]]=r,e}),{}))(e,i),s=await R(e);return Object.values(n).reduce(((t,e)=>Object.values(i).includes(e.id)?t.concat(e):t),[]).map((t=>{const[e,n]=a[t.id];return{firstTokenId:t.symbol.split("-")[0],secondTokenId:t.symbol.split("-")[1],firstTokenAmount:e,secondTokenAmount:n,liquidityTokenId:t.id,firstTokenRatio:O(e,n),secondTokenRatio:O(n,e),isPromoted:s.includes(t.id)}}))}}function E(t){const{s0:e,s1:n,s2:i,s3:s}=function(t){return{s0:BigInt(t[0])<<BigInt(0)|BigInt(t[1])<<BigInt(8)|BigInt(t[2])<<BigInt(16)|BigInt(t[3])<<BigInt(24)|BigInt(t[4])<<BigInt(32)|BigInt(t[5])<<BigInt(40)|BigInt(t[6])<<BigInt(48)|BigInt(t[7])<<BigInt(56),s1:BigInt(t[8])<<BigInt(0)|BigInt(t[9])<<BigInt(8)|BigInt(t[10])<<BigInt(16)|BigInt(t[11])<<BigInt(24)|BigInt(t[12])<<BigInt(32)|BigInt(t[13])<<BigInt(40)|BigInt(t[14])<<BigInt(48)|BigInt(t[15])<<BigInt(56),s2:BigInt(t[16])<<BigInt(0)|BigInt(t[17])<<BigInt(8)|BigInt(t[18])<<BigInt(16)|BigInt(t[19])<<BigInt(24)|BigInt(t[20])<<BigInt(32)|BigInt(t[21])<<BigInt(40)|BigInt(t[22])<<BigInt(48)|BigInt(t[23])<<BigInt(56),s3:BigInt(t[24])<<BigInt(0)|BigInt(t[25])<<BigInt(8)|BigInt(t[26])<<BigInt(16)|BigInt(t[27])<<BigInt(24)|BigInt(t[28])<<BigInt(32)|BigInt(t[29])<<BigInt(40)|BigInt(t[30])<<BigInt(48)|BigInt(t[31])<<BigInt(56)}}(t);return new a.XoShiRo256Plus(e,n,i,s)}class M{xoshiro;constructor(t){this.xoshiro=E(t)}next_u64(){const e=new t.BN(this.xoshiro.nextBigInt(BigInt(4294967295)).toString()),n=new t.BN(this.xoshiro.nextBigInt(BigInt(4294967295)).toString());return e.shln(32).or(n)}shuffle=t=>{for(let e=t.length-1;e>0;e--){const n=this.next_u64().modn(e+1),i=t[e];t[e]=t[n],t[n]=i}}}const C=t=>{if(!t)return"";const e=t.length;return t.substring(0,7)+"..."+t.substring(e-5,e)};const D=async(t,e,n,i)=>new Promise((async(a,s)=>{let r=[];const o="string"==typeof n?n:n.address,c=await(async(t,e,n)=>{let i;if(n&&n.nonce)i=n.nonce;else{const n=await H.getNonce(t,e);i=g.hasAddressNonce(e)?g.getNonce(e):n,n&&n.gt(i)&&(i=n);const a=i.addn(1);g.setNonce(e,a)}return i})(t,o,i);let u=0;try{const l=await e.signAndSend(n,{nonce:c,signer:i?.signer},(async n=>{if(console.info(`Tx[${C(e.hash.toString())}] => ${n.status.type}(${n.status.value.toString()})${function(t,e){if(!process.env.TX_VERBOSE)return"";const n=JSON.parse(e.method.toString()),i=JSON.stringify(n.args),a=t.registry.findMetaCall(e.method.callIndex);if("sudo"==a.method&&"sudo"==a.method){const i=e.method.args[0].callIndex,a=JSON.stringify(n.args.call.args),s=t.registry.findMetaCall(i);return` (sudo::${s.section}::${s.method}(${a})`}return` (${a.section}::${a.method}(${i}))`}(t,e)}`),i?.statusCallback?.(n),n.status.isFinalized){const c=n.status.asFinalized.toString(),d=(await t.rpc.chain.getHeader(c)).number.toBn(),w=d.addn(1),y=await t.rpc.chain.subscribeFinalizedHeads((async n=>{if(n.number.toBn().gt(d)){const n=await t.rpc.chain.getBlockHash(w),o=await t.rpc.chain.getHeader(n);y();const u=(await t.rpc.chain.getBlock(o.hash)).block.extrinsics,d=await t.query.system.events.at(o.hash),g=JSON.parse(o.toString()),p=Buffer.from(g.seed.seed.substring(2),"hex"),B=g.count,N=u.slice(0,B).filter((t=>!t.isSigned)),m=u.slice(B,u.length),h=N.concat(m),I=h.filter((t=>!t.isSigned)),k=((t,e)=>{let n=[];const i=new M(e),a=new Map;for(t.forEach((t=>{const e=t[0],n=t[1];a.has(e)?a.get(e).push(n):a.set(e,[n])}));0!=a.size;){const t=[],e=[];for(const t of a.entries())e.push(t[0]);e.sort();for(const n of e){const e=a.get(n);t.push(e.shift()),0==e.length&&a.delete(n)}i.shuffle(t),n=n.concat(t)}return n})(h.filter((t=>t.isSigned)).map((t=>[t.isSigned?t.signer.toString():"0000",t])),Uint8Array.from(p)),f=I.concat(k),x=f.findIndex((t=>t.hash.toString()===e.hash.toString()));x<0&&(h.forEach((t=>{console.info(`Tx ([${C(e.hash.toString())}]) origin ${t.hash.toString()}`)})),f.forEach((t=>{console.info(`Tx ([${C(e.hash.toString())}]) shuffled ${t.hash.toString()}`)})),s(`Tx ([${e.hash.toString()}])\n                      could not be find in a block\n                      $([${C(c)}])`));const T=d.filter((t=>t.phase.isApplyExtrinsic&&t.phase.asApplyExtrinsic.toNumber()===x)).map((e=>{const{event:n,phase:i}=e,a=n.typeDef,s=n.data.map(((t,e)=>({lookupName:a[e].lookupName,data:t})));return{event:n,phase:i,section:n.section,method:n.method,metaDocumentation:n.meta.docs.toString(),eventData:s,error:U(t,n.method,s)}}));r=r.concat(T),i?.extrinsicStatus?.(r),a(r),l()}else if(u++<10)console.info(`Retry [${u}] Tx: [${C(e.hash.toString())}] current: #${n.number} [${C(n.hash.toString())}] finalized in: #${d} [${C(c)}] `);else{y(),s(`Transaction was not finalized: Tx ([${C(e.hash.toString())}]): parent hash: ([${C(n.parentHash.toString())}]): Status finalized: ([${C(c)}])`);const i=await H.getNonce(t,o);g.setNonce(o,i),l()}}))}else if(n.isError){s(`Tx ([${C(e.hash.toString())}]) Transaction error`);const n=await H.getNonce(t,o);g.setNonce(o,n)}}))}catch(e){const n=await H.getNonce(t,o);g.setNonce(o,n),s({data:e.message||e.description||e.data?.toString()||e.toString()})}})),U=(e,n,i)=>{if("ExtrinsicFailed"===n){const n=i.find((t=>t.lookupName.includes("DispatchError")))?.data?.toHuman?.(),a=n?.Module?.error,s=n?.Module?.index;if(!a||!s)return{documentation:["Unknown error"],name:"UnknownError"};try{const n=e.registry.findMetaError({error:new t.BN(a),index:new t.BN(s)});return{documentation:n.docs,name:n.name}}catch(t){return{documentation:["Unknown error"],name:"UnknownError"}}}return null};class ${static async sendKusamaTokenFromRelayToParachain(t,i,a,s,r,o){const c=new n.WsProvider(t),u=await new e.ApiPromise({provider:c}).isReady,l={V1:{interior:{X1:{ParaChain:r}},parents:0}},d={V1:{interior:{X1:{AccountId32:{id:u.createType("AccountId32",a).toHex(),network:"Any"}}},parents:0}},g={V1:[{fun:{Fungible:s},id:{Concrete:{interior:"Here",parents:0}}}]};await u.tx.xcmPallet.reserveTransferAssets(l,d,g,0).signAndSend(i,{signer:o?.signer,nonce:o?.nonce})}static async sendKusamaTokenFromParachainToRelay(e,n,i,a,s){const r={V1:{parents:1,interior:{X1:{AccountId32:{network:"Any",id:e.createType("AccountId32",i).toHex()}}}}};await e.tx.xTokens.transfer("4",a,r,new t.BN("6000000000")).signAndSend(n,{signer:s?.signer,nonce:s?.nonce})}static async activateLiquidity(t,e,n,i,a){return await D(t,t.tx.xyk.activateLiquidity(n,i),e,a)}static async deactivateLiquidity(t,e,n,i,a){return await D(t,t.tx.xyk.deactivateLiquidity(n,i),e,a)}static async claimRewards(t,e,n,i,a){return await D(t,t.tx.xyk.claimRewards(n,i),e,a)}static async createPool(t,e,n,i,a,s,r){return await D(t,t.tx.xyk.createPool(n,i,a,s),e,r)}static async sellAsset(t,e,n,i,a,s,r){return await D(t,t.tx.xyk.sellAsset(n,i,a,s),e,r)}static async buyAsset(t,e,n,i,a,s,r){return await D(t,t.tx.xyk.buyAsset(n,i,a,s),e,r)}static async mintLiquidity(t,e,n,i,a,s,r){return await D(t,t.tx.xyk.mintLiquidity(n,i,a,s),e,r)}static async burnLiquidity(t,e,n,i,a,s){return await D(t,t.tx.xyk.burnLiquidity(n,i,a),e,s)}static async transferToken(t,e,n,i,a,s){return await D(t,t.tx.tokens.transfer(i,n,a),e,s)}static async transferAllToken(t,e,n,i,a){return await D(t,t.tx.tokens.transferAll(i,n,!0),e,a)}}const K=u.default("0"),j=u.default("1"),G=u.default("10"),V=u.default("100"),J=u.default("1000"),z=u.default("10000"),W=u.default("100000"),X=u.default("1000000"),Z=u.default("10000000"),Q=u.default("100000000"),Y=u.default("1000000000"),tt=u.default("10000000000"),et=u.default("100000000000"),nt=u.default("1000000000000");u.default.PE=256,u.default.NE=-256,u.default.DP=40,u.default.RM=u.default.roundUp;const it=G.pow(18),at=(e,n)=>{if(!e)return N;try{const i=u.default(e),a=n&&18!==n?G.pow(n):it,s=i.mul(a).toString();return/\D/gm.test(s)?N:new t.BN(s)}catch(t){return N}},st=(t,e)=>{if(!t)return"0";try{const n=u.default(t.toString()),i=e&&18!==e?G.pow(e):it,a=n.div(i);return a.toString()}catch(t){return"0"}};class rt{static async sendKusamaTokenFromRelayToParachainFee(i,a,r,o,c){const u=new n.WsProvider(i),l=await new e.ApiPromise({provider:u}).isReady,d={V1:{interior:{X1:{ParaChain:c}},parents:0}},g={V1:{interior:{X1:{AccountId32:{id:l.createType("AccountId32",s.encodeAddress(r,42)).toHex(),network:"Any"}}},parents:0}},w={V1:[{fun:{Fungible:o},id:{Concrete:{interior:"Here",parents:0}}}]},y=await l.tx.xcmPallet.reserveTransferAssets(d,g,w,0).paymentInfo(a);return st(new t.BN(y.partialFee.toString()),12)}static async sendKusamaTokenFromParachainToRelayFee(e,n,i,a){const r={V1:{parents:1,interior:{X1:{AccountId32:{network:"Any",id:e.createType("AccountId32",s.encodeAddress(i,2)).toHex()}}}}},o=await e.tx.xTokens.transfer("4",a,r,new t.BN("6000000000")).paymentInfo(n);return st(new t.BN(o.partialFee.toString()))}static async activateLiquidity(e,n,i,a){const s=await e.tx.xyk.activateLiquidity(i,a).paymentInfo(n);return st(new t.BN(s.partialFee.toString()))}static async deactivateLiquidity(e,n,i,a){const s=await e.tx.xyk.deactivateLiquidity(i,a).paymentInfo(n);return st(new t.BN(s.partialFee.toString()))}static async claimRewardsFee(e,n,i,a){const s=await e.tx.xyk.claimRewards(i,a).paymentInfo(n);return st(new t.BN(s.partialFee.toString()))}static async createPoolFee(e,n,i,a,s,r){const o=await e.tx.xyk.createPool(i,a,s,r).paymentInfo(n);return st(new t.BN(o.partialFee.toString()))}static async sellAssetFee(e,n,i,a,s,r){const o=await e.tx.xyk.sellAsset(i,a,s,r).paymentInfo(n);return st(new t.BN(o.partialFee.toString()))}static async buyAssetFee(e,n,i,a,s,r){const o=await e.tx.xyk.buyAsset(i,a,s,r).paymentInfo(n);return st(new t.BN(o.partialFee.toString()))}static async mintLiquidityFee(e,n,i,a,s,r=new t.BN(Number.MAX_SAFE_INTEGER)){const o=await e.tx.xyk.mintLiquidity(i,a,s,r).paymentInfo(n);return st(new t.BN(o.partialFee.toString()))}static async burnLiquidityFee(e,n,i,a,s){const r=await e.tx.xyk.burnLiquidity(i,a,s).paymentInfo(n);return st(new t.BN(r.partialFee.toString()))}static async transferTokenFee(e,n,i,a,s){const r=await e.tx.tokens.transfer(a,i,s).paymentInfo(n);return st(new t.BN(r.partialFee.toString()))}static async transferAllTokenFee(e,n,i,a){const s=await e.tx.tokens.transferAll(a,i,!0).paymentInfo(n);return st(new t.BN(s.partialFee.toString()))}}const ot=(e,n,i,a,s)=>{const r=n.sub(i),o=new t.BN(e).mul(r),c=new t.BN(s).mul(new t.BN(106)).div(new t.BN(6)),l=u.default(1e4),d=u.default(1.06).pow(r.toNumber()).mul(l).round(0,0),g=(""+d.toString()).replace(/(-?)(\d*)\.?(\d+)e([+-]\d+)/,(function(t,e,n,i,a){return a<0?e+"0."+Array(1-a-n.length).join("0")+n+i:e+n+i+Array(a-i.length+1).join("0")}));const w=new t.BN(c).sub(new t.BN(c).mul(new t.BN(l.toString())).div(new t.BN(g))),y=new t.BN(o).sub(w);return new t.BN(a).add(y)},ct=async(e,n,i,a,s)=>{const{lastCheckpoint:r,cummulativeWorkInLastCheckpoint:o,missingAtLastCheckpoint:c}=await(async(e,n,i,a)=>{const[s,r,o]=await a.query.xyk.liquidityMiningUser([e,n]);return new t.BN(s.toString()).eq(new t.BN(0))&&new t.BN(r.toString()).eq(new t.BN(0))&&new t.BN(o.toString()).eq(new t.BN(0))?{lastCheckpoint:i,cummulativeWorkInLastCheckpoint:u.default(0),missingAtLastCheckpoint:u.default(0)}:{lastCheckpoint:u.default(s.toString()),cummulativeWorkInLastCheckpoint:u.default(r.toString()),missingAtLastCheckpoint:u.default(o.toString())}})(e,i,a,s);return ot(n,a,new t.BN(r.toString()),new t.BN(o.toString()),new t.BN(c.toString()))},ut=async(e,n,i,a)=>{const{lastCheckpoint:s,cummulativeWorkInLastCheckpoint:r,missingAtLastCheckpoint:o}=await(async(e,n,i)=>{const[a,s,r]=await i.query.xyk.liquidityMiningPool(e);return new t.BN(a.toString()).eq(new t.BN(0))&&new t.BN(s.toString()).eq(new t.BN(0))&&new t.BN(r.toString()).eq(new t.BN(0))?{lastCheckpoint:n,cummulativeWorkInLastCheckpoint:new t.BN(0),missingAtLastCheckpoint:new t.BN(0)}:{lastCheckpoint:new t.BN(a.toString()),cummulativeWorkInLastCheckpoint:new t.BN(s.toString()),missingAtLastCheckpoint:new t.BN(r.toString())}})(n,i,a);return ot(e,i,new t.BN(s.toString()),new t.BN(r.toString()),new t.BN(o.toString()))};class lt{api;urls;static instanceMap=new Map;constructor(t){this.urls=t,this.api=(async()=>await this.connectToNode(t))()}async connectToNode(t){const a=new n.WsProvider(t,5e3);return await e.ApiPromise.create(i.options({provider:a,throwOnConnect:!0,throwOnUnknown:!0}))}static getInstance(t){return lt.instanceMap.has(t)||this.instanceMap.set(t,new lt(t)),this.instanceMap.get(t)}async getApi(){return this.api||(this.api=this.connectToNode(this.urls)),this.api}getUrls(){return this.urls}async waitForNewBlock(t){let e=0;const n=await this.getApi(),i=t||2;return new Promise((async t=>{const a=await n.rpc.chain.subscribeNewHeads((()=>{++e===i&&(a(),t(!0))}))}))}async getChain(){const t=await this.getApi();return l.getChain(t)}async getNodeName(){const t=await this.getApi();return l.getNodeName(t)}async getNodeVersion(){const t=await this.getApi();return l.getNodeVersion(t)}async getNonce(t){const e=await this.getApi();return H.getNonce(e,t)}async disconnect(){const t=await this.getApi();await t.disconnect()}async sendKusamaTokenFromRelayToParachain(t,e,n,i,a=2110,s){return await $.sendKusamaTokenFromRelayToParachain(t,e,n,i,a,s)}async sendKusamaTokenFromRelayToParachainFee(t,e,n,i,a=2110){return await rt.sendKusamaTokenFromRelayToParachainFee(t,e,n,i,a)}async sendKusamaTokenFromParachainToRelay(t,e,n,i){const a=await this.getApi();return await $.sendKusamaTokenFromParachainToRelay(a,t,e,n,i)}async sendKusamaTokenFromParachainToRelayFee(t,e,n){const i=await this.getApi();return await rt.sendKusamaTokenFromParachainToRelayFee(i,t,e,n)}async activateLiquidity(t,e,n,i){const a=await this.getApi();return await $.activateLiquidity(a,t,e,n,i)}async deactivateLiquidity(t,e,n,i){const a=await this.getApi();return await $.deactivateLiquidity(a,t,e,n,i)}async calculateFutureRewardsAmount(e,n,i){const a=await this.getApi();return await(async(e,n,i,a)=>{const s=await e.rpc.chain.getBlock(),r=new t.BN(s.block.header.number.toString()),o=r.add(new t.BN(a)).div(new t.BN(1e4)),c=await e.query.xyk.liquidityMiningActiveUser([n,new t.BN(i)]),u=await e.query.xyk.liquidityMiningActivePool(new t.BN(i)),l=await ct(n,new t.BN(c.toString()),i,o,e),d=await ut(new t.BN(u.toString()),i,o,e),g=await e.query.xyk.liquidityMiningUserToBeClaimed([n,i]),w=await e.query.xyk.liquidityMiningUserClaimed([n,i]),y=await e.query.issuance.promotedPoolsRewards(i),p=new t.BN(y.toString()),B=new t.BN("136986000000000000000000"),N=a.sub(r).div(new t.BN(1200)),m=await e.query.issuance.promotedPoolsRewards.entries(),h=p.add(B.mul(N).div(new t.BN(m.length)));let I=new t.BN(0);return l.gt(new t.BN(0))&&d.gt(new t.BN(0))&&(I=h.mul(l).div(d)),I.add(new t.BN(g.toString())).sub(new t.BN(w.toString()))})(a,e,n,i)}async calculateRewardsAmount(t,e){const n=await this.getApi();return await l.calculateRewardsAmount(n,t,e)}async claimRewardsFee(t,e,n){const i=await this.getApi();return await rt.claimRewardsFee(i,t,e,n)}async claimRewards(t,e,n,i){const a=await this.getApi();return await $.claimRewards(a,t,e,n,i)}async createPoolFee(t,e,n,i,a){const s=await this.getApi();return await rt.createPoolFee(s,t,e,n,i,a)}async createPool(t,e,n,i,a,s){const r=await this.getApi();return await $.createPool(r,t,e,n,i,a,s)}async sellAssetFee(t,e,n,i,a){const s=await this.getApi();return await rt.sellAssetFee(s,t,e,n,i,a)}async sellAsset(t,e,n,i,a,s){const r=await this.getApi();return await $.sellAsset(r,t,e,n,i,a,s)}async mintLiquidityFee(t,e,n,i,a){const s=await this.getApi();return await rt.mintLiquidityFee(s,t,e,n,i,a)}async mintLiquidity(t,e,n,i,a,s){const r=await this.getApi();return await $.mintLiquidity(r,t,e,n,i,a,s)}async burnLiquidityFee(t,e,n,i){const a=await this.getApi();return await rt.burnLiquidityFee(a,t,e,n,i)}async burnLiquidity(t,e,n,i,a){const s=await this.getApi();return await $.burnLiquidity(s,t,e,n,i,a)}async buyAssetFee(t,e,n,i,a){const s=await this.getApi();return await rt.buyAssetFee(s,t,e,n,i,a)}async buyAsset(t,e,n,i,a,s){const r=await this.getApi();return await $.buyAsset(r,t,e,n,i,a,s)}async calculateBuyPrice(t,e,n){const i=await this.getApi();return await l.calculateBuyPrice(i,t,e,n)}async calculateSellPrice(t,e,n){const i=await this.getApi();return await l.calculateSellPrice(i,t,e,n)}async getBurnAmount(t,e,n){const i=await this.getApi();return await l.getBurnAmount(i,t,e,n)}async calculateSellPriceId(t,e,n){const i=await this.getApi();return await l.calculateSellPriceId(i,t,e,n)}async calculateBuyPriceId(t,e,n){const i=await this.getApi();return await l.calculateBuyPriceId(i,t,e,n)}async getAmountOfTokenIdInPool(t,e){const n=await this.getApi();return await H.getAmountOfTokenIdInPool(n,t,e)}async getLiquidityTokenId(t,e){const n=await this.getApi();return await H.getLiquidityTokenId(n,t,e)}async getLiquidityPool(t){const e=await this.getApi();return await H.getLiquidityPool(e,t)}async transferTokenFee(t,e,n,i){const a=await this.getApi();return await rt.transferTokenFee(a,t,e,n,i)}async transferToken(t,e,n,i,a){const s=await this.getApi();return await $.transferToken(s,t,e,n,i,a)}async transferTokenAllFee(t,e,n){const i=await this.getApi();return await rt.transferAllTokenFee(i,t,e,n)}async transferTokenAll(t,e,n,i){const a=await this.getApi();return await $.transferAllToken(a,t,e,n,i)}async getTotalIssuance(t){const e=await this.getApi();return await H.getTotalIssuance(e,t)}async getTokenBalance(t,e){const n=await this.getApi();return await H.getTokenBalance(n,e,t)}async getNextTokenId(){const t=await this.getApi();return await H.getNextTokenId(t)}async getTokenInfo(t){const e=await this.getApi();return await H.getTokenInfo(e,t)}async getBlockNumber(){const t=await this.getApi();return await H.getBlockNumber(t)}async getOwnedTokens(t){const e=await this.getApi();return await H.getOwnedTokens(e,t)}async getLiquidityTokenIds(){const t=await this.getApi();return await H.getLiquidityTokenIds(t)}async getAssetsInfo(){const t=await this.getApi();return await H.getAssetsInfo(t)}async getBalances(){const t=await this.getApi();return await H.getBalances(t)}async getLiquidityTokens(){const t=await this.getApi();return await H.getLiquidityTokens(t)}async getPool(t){const e=await this.getApi();return await H.getPool(e,t)}async getInvestedPools(t){const e=await this.getApi();return await H.getInvestedPools(e,t)}async getPools(){const t=await this.getApi();return await H.getPools(t)}}const dt=(t,e)=>{const n=new RegExp(`^-?\\d+(?:\\.\\d{0,${e}})?`,"gm");return(t.match(n)?.[0]||t).match(/^0*(\d+(?:\.(?:(?!0+$)\d)+)?)/gm)?.[0]??t},gt=t=>{const e=+t;return!(!t||isNaN(Number(t))||isNaN(e)||e<0)};Object.defineProperty(exports,"BN",{enumerable:!0,get:function(){return t.BN}}),exports.BIG_BILLION=Y,exports.BIG_HUNDRED=V,exports.BIG_HUNDRED_BILLIONS=et,exports.BIG_HUNDRED_MILLIONS=Q,exports.BIG_HUNDRED_THOUSAND=W,exports.BIG_MILLION=X,exports.BIG_ONE=j,exports.BIG_TEN=G,exports.BIG_TEN_BILLIONS=tt,exports.BIG_TEN_MILLIONS=Z,exports.BIG_TEN_THOUSAND=z,exports.BIG_THOUSAND=J,exports.BIG_TRILLION=nt,exports.BIG_ZERO=K,exports.BN_BILLION=q,exports.BN_DIV_NUMERATOR_MULTIPLIER=v,exports.BN_DIV_NUMERATOR_MULTIPLIER_DECIMALS=18,exports.BN_HUNDRED=I,exports.BN_HUNDRED_BILLIONS=P,exports.BN_HUNDRED_MILLIONS=S,exports.BN_HUNDRED_THOUSAND=x,exports.BN_MILLION=T,exports.BN_ONE=m,exports.BN_TEN=h,exports.BN_TEN_BILLIONS=b,exports.BN_TEN_MILLIONS=A,exports.BN_TEN_THOUSAND=f,exports.BN_THOUSAND=k,exports.BN_TRILLION=L,exports.BN_ZERO=N,exports.Mangata=lt,exports.MangataHelpers=class{static createKeyring(t){return new e.Keyring({type:t})}static createKeyPairFromName(t,e=""){const n=e||"//testUser_"+o.v4(),i=t.createFromUri(n);return t.addPair(i),i}static getXoshiro(t){return E(t)}static getPriceImpact(t,e,n,i){if(!(t&&e&&gt(n)&&gt(i)))return;const a=t.firstTokenBalance,s=t.secondTokenBalance,r=at(n,e.firstTokenDecimals),o=at(i,e.secondTokenDecimals);if(o.gte(s))return"";const c=a.add(r).mul(f).mul(s),l=s.sub(o).mul(a),d=c.div(l).sub(f).toString(),g=u.default(d);return dt(g.div(V).toString(),2)}},exports.fromBN=st,exports.signTx=D,exports.toBN=at,exports.toFixed=dt;
