import{isHex as t,hexToBn as e,BN as n,hexToString as a,BN_ZERO as i,hexToU8a as r}from"@polkadot/util";export{BN}from"@polkadot/util";import{ApiPromise as s,Keyring as o}from"@polkadot/api";import{WsProvider as c}from"@polkadot/rpc-provider/ws";import{options as u}from"@mangata-finance/types";import{encodeAddress as g}from"@polkadot/util-crypto";import d from"big.js";import{v4 as w}from"uuid";import{XoShiRo256Plus as l}from"mangata-prng-xoshiro";class y{static async getChain(t){return(await t.rpc.system.chain()).toHuman()}static async getNodeName(t){return(await t.rpc.system.name()).toHuman()}static async getNodeVersion(t){return(await t.rpc.system.version()).toHuman()}static async calculateRewardsAmount(a,i,r){const s=await a.rpc.xyk.calculate_rewards_amount(i,r);return t(s.price.toString())?e(s.price.toString()):new n(s.price)}static async calculateBuyPrice(t,e,a,i){const r=await t.rpc.xyk.calculate_buy_price(e,a,i);return new n(r.price)}static async calculateSellPrice(t,e,a,i){const r=await t.rpc.xyk.calculate_sell_price(e,a,i);return new n(r.price)}static async getBurnAmount(t,e,n,a){const i=await t.rpc.xyk.get_burn_amount(e,n,a);return JSON.parse(i.toString())}static async calculateSellPriceId(t,e,a,i){const r=await t.rpc.xyk.calculate_sell_price_id(e,a,i);return new n(r.price)}static async calculateBuyPriceId(t,e,a,i){const r=await t.rpc.xyk.calculate_buy_price_id(e,a,i);return new n(r.price)}}class m{static instance;db={};constructor(){}static getInstance(){return m.instance||(m.instance=new m),m.instance}hasAddressNonce=t=>!!this.db[t];setNonce=(t,e)=>{this.db[t]=e};getNonce=t=>this.db[t]}const p=m.getInstance(),k=async t=>(await t.query.assetRegistry.metadata.entries()).reduce(((t,[e,n])=>{const i=e.toHuman()[0].replace(/[, ]/g,""),{name:r,decimals:s,symbol:o}=n.unwrap(),c={id:i,chainId:0,decimals:Number(s.toString()),name:a(r.toString()),symbol:a(o.toString()),address:"MGA"===a(o.toString())?"0xc7e3bda797d2ceb740308ec40142ae235e08144a":"ETH"===a(o.toString())?"0x0000000000000000000000000000000000000000":""};return t[i]=c,t}),{}),h=async t=>(await t.query.xyk.liquidityAssets.entries()).reduce(((t,[e,n])=>{const a=e.args.map((t=>t.toHuman()))[0],i=n.toString().replace(/[, ]/g,"");return t[a]=i,t}),{}),T=async(a,i)=>(await a.query.tokens.accounts.entries(i)).reduce(((a,[i,r])=>{const s=JSON.parse(JSON.stringify(r)).free.toString(),o=JSON.parse(JSON.stringify(r)).frozen.toString(),c=JSON.parse(JSON.stringify(r)).reserved.toString(),u={free:t(s)?e(s):new n(s),frozen:t(o)?e(o):new n(o),reserved:t(c)?e(c):new n(c)};return a[i.toHuman()[1].replace(/[, ]/g,"")]=u,a}),{}),A=async t=>{const n=await k(t);return Object.values(n).filter((t=>"1"!==t.id&&"3"!==t.id)).reduce(((t,n)=>{const a={...n,name:n.name.replace(/0x\w+/,"").replace(/[A-Z]/g," $&").trim(),symbol:n.symbol.includes("TKN")?n.symbol.split("-").reduce(((t,n)=>{const a=n.replace("TKN",""),i=a.startsWith("0x")?e(a).toString():a;return t.push(i),t}),[]).join("-"):n.symbol};return t[a.id]=a,t}),{})},I=new n("0"),f=new n("1"),S=new n("10"),x=new n("100"),F=new n("1000"),P=new n("10000"),B=new n("100000"),b=new n("1000000"),q=new n("10000000"),v=new n("100000000"),N=new n("1000000000"),L=new n("10000000000"),R=new n("100000000000"),M=new n("1000000000000"),O=18,C=new n("10").pow(new n(18)),H=async(t,e,a)=>{if(a.isZero())return I;const i=await t.query.tokens.totalIssuance(e),r=new n(i.toString());return a.mul(C).div(r)},$=(t,e)=>e.gt(I)?$(e,t.mod(e)):t,V=(t,e)=>{const n=((t,e)=>{const n=$(t,e);return n.isZero()?[I,I]:[t.div(n),e.div(n)]})(t,e);return n[1].mul(C).div(n[0])},E=async t=>{try{return(await t.query.issuance.promotedPoolsRewards.entries()).map((([t])=>t.args.map((t=>t.toHuman()))[0]))}catch(t){return[]}};class J{static async getNonce(t,e){return(await t.rpc.system.accountNextIndex(e)).toBn()}static async getAmountOfTokenIdInPool(a,i,r){const s=await a.query.xyk.pools([i,r]),o=s[0].toString(),c=s[1].toString();return[t(o)?e(o):new n(o),t(c)?e(c):new n(c)]}static async getLiquidityTokenId(t,e,a){const r=await t.query.xyk.liquidityAssets([e,a]);return r.isSome?new n(r.toString()):i}static async getLiquidityPool(t,e){const a=await t.query.xyk.liquidityPools(e);return a.isSome?a.unwrap().map((t=>new n(t))):[new n(-1),new n(-1)]}static async getTotalIssuance(t,e){const a=await t.query.tokens.totalIssuance(e);return new n(a)}static async getTokenBalance(a,i,r){const{free:s,reserved:o,frozen:c}=await a.query.tokens.accounts(i,r);return{free:t(s.toString())?e(s.toString()):new n(s.toString()),reserved:t(o.toString())?e(o.toString()):new n(o.toString()),frozen:t(c.toString())?e(c.toString()):new n(c.toString())}}static async getNextTokenId(t){const e=await t.query.tokens.nextCurrencyId();return new n(e)}static async getTokenInfo(t,e){return(await this.getAssetsInfo(t))[e]}static async getLiquidityTokenIds(t){return(await t.query.xyk.liquidityAssets.entries()).map((t=>t[1].toString()))}static async getLiquidityTokens(t){const e=await this.getAssetsInfo(t);return Object.values(e).reduce(((t,e)=>(e.name.includes("Liquidity Pool Token")&&(t[e.id]=e),t)),{})}static async getAssetsInfo(t){const n=await k(t);return Object.values(n).filter((t=>!["1","3","6"].includes(t.id))).reduce(((t,a)=>{const i={...a,name:a.name.replace(/0x\w+/,"").replace(/[A-Z]/g," $&").trim(),symbol:a.symbol.includes("TKN")?a.symbol.split("-").reduce(((t,a)=>{const i=a.replace("TKN",""),r=i.startsWith("0x")?e(i).toString():i,s=n[r].symbol;return t.push(s),t}),[]).join("-"):a.symbol};return t[i.id]=i,t}),{})}static async getBlockNumber(t){return(await t.rpc.chain.getBlock()).block.header.number.toString()}static async getOwnedTokens(t,e){if(!e)return null;const[n,a]=await Promise.all([this.getAssetsInfo(t),T(t,e)]);return Object.values(n).reduce(((t,e)=>(Object.keys(a).includes(e.id)&&(t[e.id]={...e,balance:a[e.id]}),t)),{})}static async getBalances(t){return(await t.query.tokens.totalIssuance.entries()).reduce(((t,[e,a])=>{const i=e.toHuman()[0].replace(/[, ]/g,""),r=new n(a.toString());return t[i]=r,t}),{})}static async getInvestedPools(t,e){const[n,a,i]=await Promise.all([A(t),T(t,e),E(t)]),r=Object.values(n).reduce(((t,e)=>(Object.keys(a).includes(e.id)&&e.name.includes("Liquidity Pool Token")&&t.push(e),t)),[]).map((async e=>{const n=a[e.id],r=e.symbol.split("-")[0],s=e.symbol.split("-")[1],[o,c]=await this.getAmountOfTokenIdInPool(t,r.toString(),s.toString());return{firstTokenId:r,secondTokenId:s,firstTokenAmount:o,secondTokenAmount:c,liquidityTokenId:e.id,isPromoted:i.includes(e.id),share:await H(t,e.id,n.free.add(n.reserved)),firstTokenRatio:V(o,c),secondTokenRatio:V(c,o),activatedLPTokens:n.reserved,nonActivatedLPTokens:n.free}}));return Promise.all(r)}static async getPool(t,e){const[n,a]=await Promise.all([this.getLiquidityPool(t,e),t.query.issuance.promotedPoolsRewards(e)]),[i,r]=n,[s,o]=await this.getAmountOfTokenIdInPool(t,i.toString(),r.toString());return{firstTokenId:i.toString(),secondTokenId:r.toString(),firstTokenAmount:s,secondTokenAmount:o,liquidityTokenId:e,isPromoted:a.gtn(0),firstTokenRatio:V(s,o),secondTokenRatio:V(o,s)}}static async getPools(a){const[i,r]=await Promise.all([A(a),h(a)]),s=await(async(a,i)=>(await a.query.xyk.pools.entries()).reduce(((a,[r,s])=>{const o=r.args.map((t=>t.toHuman()))[0],c=JSON.parse(JSON.stringify(s)).map((a=>t(a)?e(a):new n(a)));return a[i[o]]=c,a}),{}))(a,r),o=await E(a);return Object.values(i).reduce(((t,e)=>Object.values(r).includes(e.id)?t.concat(e):t),[]).map((t=>{const[e,n]=s[t.id];return{firstTokenId:t.symbol.split("-")[0],secondTokenId:t.symbol.split("-")[1],firstTokenAmount:e,secondTokenAmount:n,liquidityTokenId:t.id,firstTokenRatio:V(e,n),secondTokenRatio:V(n,e),isPromoted:o.includes(t.id)}}))}}const X=async(t,e,n,a)=>new Promise((async(i,r)=>{const s="string"==typeof n?n:n.address,o=await(async(t,e,n)=>{let a;if(n&&n.nonce)a=n.nonce;else{const n=await J.getNonce(t,e);a=p.hasAddressNonce(e)?p.getNonce(e):n,n&&n.gt(a)&&(a=n);const i=a.addn(1);p.setNonce(e,i)}return a})(t,s,a);console.info(`signTx Tx[${e.hash.toString()}] who:${s} nonce:${o.toString()} `);try{const c=await e.signAndSend(n,{nonce:o,signer:a?.signer},(async n=>{if(console.info(`Tx[${e.hash.toString()}] who:${s} nonce:${o.toString()} => ${n.status.type}(${n.status.value.toString()})${function(t,e){if(!process.env.TX_VERBOSE)return"";const n=JSON.parse(e.method.toString()),a=JSON.stringify(n.args),i=t.registry.findMetaCall(e.method.callIndex);if("sudo"==i.method&&"sudo"==i.method){const a=e.method.args[0].callIndex,i=JSON.stringify(n.args.call.args),r=t.registry.findMetaCall(a);return` (sudo::${r.section}::${r.method}(${i})`}return` (${i.section}::${i.method}(${a}))`}(t,e)}`),a?.statusCallback?.(n),n.status.isFinalized){const u=n.status.asFinalized.toString(),g=(await t.rpc.chain.getHeader(u)).number.toBn(),d=g.addn(1),w=g.addn(10),l=d,y=await t.rpc.chain.subscribeFinalizedHeads((async n=>{const u=n.number.toBn();if(l.gt(w)){y(),r(`Tx ([${e.hash.toString()}])\n                      was not executed in blocks : ${d.toString()} .. ${w.toString()}`);const n=await J.getNonce(t,s);return p.setNonce(s,n),void c()}if(u.gte(l)){const n=await t.rpc.chain.getBlockHash(l),r=await t.rpc.chain.getHeader(n),u=(await t.rpc.chain.getBlock(r.hash)).block.extrinsics,g=await t.query.system.events.at(r.hash);l.iaddn(1);const d=u.findIndex((t=>t.hash.toString()===e.hash.toString()));if(d<0)return void console.info(`Tx([${e.hash.toString()}]) not found in block ${l} $([${(t=>{if(!t)return"";const e=t.length;return t.substring(0,7)+"..."+t.substring(e-5,e)})(n.toString())}])`);y(),console.info(`Tx[${e.hash.toString()}] who:${s} nonce:${o.toString()} => Executed(${n.toString()})`);const w=g.filter((t=>t.phase.isApplyExtrinsic&&t.phase.asApplyExtrinsic.toNumber()===d)).map((e=>{const{event:n,phase:a}=e,i=n.typeDef,r=n.data.map(((t,e)=>({lookupName:i[e].lookupName,data:t})));return{event:n,phase:a,section:n.section,method:n.method,metaDocumentation:n.meta.docs.toString(),eventData:r,error:_(t,n.method,r)}}));a?.extrinsicStatus?.(w),i(w),c()}}))}else if(n.isError){console.info("Transaction Error Result",JSON.stringify(n,null,2)),r(`Tx([${e.hash.toString()}]) Transaction error`);const a=await J.getNonce(t,s);p.setNonce(s,a)}}))}catch(e){const n=await J.getNonce(t,s);p.setNonce(s,n),r({data:e.message||e.description||e.data?.toString()||e.toString()})}})),_=(e,a,i)=>{if("ExtrinsicFailed"===a){const a=i.find((t=>t.lookupName.includes("DispatchError")))?.data?.toHuman?.(),s=a?.Module?.error,o=a?.Module?.index;if(!s||!o)return{documentation:["Unknown error"],name:"UnknownError"};try{const a=e.registry.findMetaError({error:t(s)?r(s):new n(s),index:new n(o)});return{documentation:a.docs,name:a.name}}catch(t){return{documentation:["Unknown error"],name:"UnknownError"}}}return null};class K{static async sendKusamaTokenFromRelayToParachain(t,e,n,a,i,r){const o=new c(t),u=await new s({provider:o}).isReady,g={V1:{interior:{X1:{ParaChain:i}},parents:0}},d={V1:{interior:{X1:{AccountId32:{id:u.createType("AccountId32",n).toHex(),network:"Any"}}},parents:0}},w={V1:[{fun:{Fungible:a},id:{Concrete:{interior:"Here",parents:0}}}]};await u.tx.xcmPallet.reserveTransferAssets(g,d,w,0).signAndSend(e,{signer:r?.signer,nonce:r?.nonce})}static async sendKusamaTokenFromParachainToRelay(t,e,a,i,r){const s={V1:{parents:1,interior:{X1:{AccountId32:{network:"Any",id:t.createType("AccountId32",a).toHex()}}}}};await t.tx.xTokens.transfer("4",i,s,new n("6000000000")).signAndSend(e,{signer:r?.signer,nonce:r?.nonce})}static async sendTokenFromParachainToMangata(...t){const[e,a,i,r,o,u,d,w]=t,l=new c(a),y=await new s({provider:l}).isReady,m=g(u,42),p=(await e.query.assetRegistry.metadata.entries()).find((t=>t[1].value.symbol.toPrimitive()===i));if(p&&p[1].value.location){const{location:t}=p[1].unwrap(),e={V1:{id:{Concrete:{parents:"1",interior:JSON.parse(t.toString()).v1.interior}},fun:{Fungible:d}}},a={V1:{parents:1,interior:{X2:[{Parachain:2110},{AccountId32:{network:"Any",id:y.createType("AccountId32",m).toHex()}}]}}};await y.tx.xTokens.transferMultiasset(e,a,new n(r)).signAndSend(o,{signer:w?.signer,nonce:w?.nonce})}}static async sendTokenFromMangataToParachain(...t){const[e,a,i,r,s,o,c,u]=t,d=g(o,42),w=(await e.query.assetRegistry.metadata.entries()).find((t=>t[1].value.symbol.toPrimitive()===a));if(w&&w[1].value.location){const t=w[0].toHuman()[0].replace(/[, ]/g,""),a={V1:{parents:1,interior:{X2:[{Parachain:r},{AccountId32:{network:"Any",id:e.createType("AccountId32",d).toHex()}}]}}};await X(e,e.tx.xTokens.transfer(t,c,a,new n(i)),s,u)}}static async sendTurTokenFromTuringToMangata(t,e,a,i,r,o){const u=new c(e),d=await new s({provider:u}).isReady,w=g(i,42),l={V1:{id:{Concrete:{parents:1,interior:{X1:{Parachain:2114}}}},fun:{Fungible:r}}},y={V1:{parents:1,interior:{X2:[{Parachain:2110},{AccountId32:{network:"Any",id:t.createType("AccountId32",w).toHex()}}]}}};await d.tx.xTokens.transferMultiasset(l,y,new n("4000000000")).signAndSend(a,{signer:o?.signer,nonce:o?.nonce})}static async sendTurTokenFromMangataToTuring(t,e,a,i,r){const s=g(a,42),o={V1:{parents:1,interior:{X2:[{Parachain:2114},{AccountId32:{network:"Any",id:t.createType("AccountId32",s).toHex()}}]}}};await X(t,t.tx.xTokens.transfer("7",i,o,new n("6000000000")),e,r)}static async activateLiquidity(t,e,n,a,i){return await X(t,t.tx.xyk.activateLiquidity(n,a,null),e,i)}static async deactivateLiquidity(t,e,n,a,i){return await X(t,t.tx.xyk.deactivateLiquidity(n,a),e,i)}static async claimRewards(t,e,n,a,i){return await X(t,t.tx.xyk.claimRewards(n,a),e,i)}static async createPool(t,e,n,a,i,r,s){return await X(t,t.tx.xyk.createPool(n,a,i,r),e,s)}static async sellAsset(t,e,n,a,i,r,s){return await X(t,t.tx.xyk.sellAsset(n,a,i,r),e,s)}static async buyAsset(t,e,n,a,i,r,s){return await X(t,t.tx.xyk.buyAsset(n,a,i,r),e,s)}static async mintLiquidity(t,e,n,a,i,r,s){return await X(t,t.tx.xyk.mintLiquidity(n,a,i,r),e,s)}static async burnLiquidity(t,e,n,a,i,r){return await X(t,t.tx.xyk.burnLiquidity(n,a,i),e,r)}static async transferToken(t,e,n,a,i,r){return await X(t,t.tx.tokens.transfer(a,n,i),e,r)}static async transferAllToken(t,e,n,a,i){return await X(t,t.tx.tokens.transferAll(a,n,!0),e,i)}}const j=d("0"),U=d("1"),D=d("10"),W=d("100"),z=d("1000"),Z=d("10000"),G=d("100000"),Q=d("1000000"),Y=d("10000000"),tt=d("100000000"),et=d("1000000000"),nt=d("10000000000"),at=d("100000000000"),it=d("1000000000000");d.PE=256,d.NE=-256,d.DP=40,d.RM=d.roundUp;const rt=D.pow(18),st=(t,e)=>{if(!t)return I;try{const a=d(t),i=e&&18!==e?D.pow(e):rt,r=a.mul(i).toString();return/\D/gm.test(r)?I:new n(r)}catch(t){return I}},ot=(t,e)=>{if(!t)return"0";try{const n=d(t.toString()),a=e&&18!==e?D.pow(e):rt,i=n.div(a);return i.toString()}catch(t){return"0"}};class ct{static async sendTokenFromParachainToMangataFee(...t){const[e,a,i,r,o,u,d]=t,w=new c(a),l=await new s({provider:w}).isReady,y=g(u,42),m=(await e.query.assetRegistry.metadata.entries()).find((t=>t[1].value.symbol.toPrimitive()===i));if(m&&m[1].value.location){const{location:t,decimals:e}=m[1].unwrap(),a=JSON.parse(t.toString()),i=JSON.parse(e.toString()),s={V1:{id:{Concrete:{parents:"1",interior:a.v1.interior}},fun:{Fungible:d}}},c={V1:{parents:1,interior:{X2:[{Parachain:2110},{AccountId32:{network:"Any",id:l.createType("AccountId32",y).toHex()}}]}}},u=await l.tx.xTokens.transferMultiasset(s,c,new n(r)).paymentInfo(o);return ot(new n(u.partialFee.toString()),Number(i))}return I}static async sendTokenFromMangataToParachainFee(...t){const[e,a,i,r,s,o,c]=t,u=g(o,42),d=(await e.query.assetRegistry.metadata.entries()).find((t=>t[1].value.symbol.toPrimitive()===a));if(d&&d[1].value.location){const t=d[0].toHuman()[0].replace(/[, ]/g,""),a={V1:{parents:1,interior:{X2:[{Parachain:r},{AccountId32:{network:"Any",id:e.createType("AccountId32",u).toHex()}}]}}},o=await e.tx.xTokens.transfer(t,c,a,new n(i)).paymentInfo(s);return ot(new n(o.partialFee.toString()))}}static async sendTurTokenFromTuringToMangataFee(t,e,a,i,r){const o=new c(e),u=await new s({provider:o}).isReady,d=g(i,42),w={V1:{id:{Concrete:{parents:1,interior:{X1:{Parachain:2114}}}},fun:{Fungible:r}}},l={V1:{parents:1,interior:{X2:[{Parachain:2110},{AccountId32:{network:"Any",id:t.createType("AccountId32",d).toHex()}}]}}},y=await u.tx.xTokens.transferMultiasset(w,l,new n("4000000000")).paymentInfo(a);return ot(new n(y.partialFee.toString()),10)}static async sendTurTokenFromMangataToTuringFee(t,e,a,i){const r=g(a,42),s={V1:{parents:1,interior:{X2:[{Parachain:2114},{AccountId32:{network:"Any",id:t.createType("AccountId32",r).toHex()}}]}}},o=await t.tx.xTokens.transfer("7",i,s,new n("6000000000")).paymentInfo(e);return ot(new n(o.partialFee.toString()))}static async sendKusamaTokenFromRelayToParachainFee(t,e,a,i,r){const o=new c(t),u=await new s({provider:o}).isReady,d={V1:{interior:{X1:{ParaChain:r}},parents:0}},w={V1:{interior:{X1:{AccountId32:{id:u.createType("AccountId32",g(a,42)).toHex(),network:"Any"}}},parents:0}},l={V1:[{fun:{Fungible:i},id:{Concrete:{interior:"Here",parents:0}}}]},y=await u.tx.xcmPallet.reserveTransferAssets(d,w,l,0).paymentInfo(e);return ot(new n(y.partialFee.toString()),12)}static async sendKusamaTokenFromParachainToRelayFee(t,e,a,i){const r={V1:{parents:1,interior:{X1:{AccountId32:{network:"Any",id:t.createType("AccountId32",g(a,2)).toHex()}}}}},s=await t.tx.xTokens.transfer("4",i,r,new n("6000000000")).paymentInfo(e);return ot(new n(s.partialFee.toString()))}static async activateLiquidity(t,e,a,i){const r=await t.tx.xyk.activateLiquidity(a,i,null).paymentInfo(e);return ot(new n(r.partialFee.toString()))}static async deactivateLiquidity(t,e,a,i){const r=await t.tx.xyk.deactivateLiquidity(a,i).paymentInfo(e);return ot(new n(r.partialFee.toString()))}static async claimRewardsFee(t,e,a,i){const r=await t.tx.xyk.claimRewards(a,i).paymentInfo(e);return ot(new n(r.partialFee.toString()))}static async createPoolFee(t,e,a,i,r,s){const o=await t.tx.xyk.createPool(a,i,r,s).paymentInfo(e);return ot(new n(o.partialFee.toString()))}static async sellAssetFee(t,e,a,i,r,s){const o=await t.tx.xyk.sellAsset(a,i,r,s).paymentInfo(e);return ot(new n(o.partialFee.toString()))}static async buyAssetFee(t,e,a,i,r,s){const o=await t.tx.xyk.buyAsset(a,i,r,s).paymentInfo(e);return ot(new n(o.partialFee.toString()))}static async mintLiquidityFee(t,e,a,i,r,s=new n(Number.MAX_SAFE_INTEGER)){const o=await t.tx.xyk.mintLiquidity(a,i,r,s).paymentInfo(e);return ot(new n(o.partialFee.toString()))}static async burnLiquidityFee(t,e,a,i,r){const s=await t.tx.xyk.burnLiquidity(a,i,r).paymentInfo(e);return ot(new n(s.partialFee.toString()))}static async transferTokenFee(t,e,a,i,r){const s=await t.tx.tokens.transfer(i,a,r).paymentInfo(e);return ot(new n(s.partialFee.toString()))}static async transferAllTokenFee(t,e,a,i){const r=await t.tx.tokens.transferAll(i,a,!0).paymentInfo(e);return ot(new n(r.partialFee.toString()))}}const ut=(t,e,a,i,r)=>{const s=e.sub(a),o=new n(t).mul(s),c=new n(r).mul(new n(106)).div(new n(6)),u=d(1e4),g=d(1.06).pow(s.toNumber()).mul(u).round(0,0),w=(""+g.toString()).replace(/(-?)(\d*)\.?(\d+)e([+-]\d+)/,(function(t,e,n,a,i){return i<0?e+"0."+Array(1-i-n.length).join("0")+n+a:e+n+a+Array(i-a.length+1).join("0")}));const l=new n(c).sub(new n(c).mul(new n(u.toString())).div(new n(w))),y=new n(o).sub(l);return new n(i).add(y)},gt=async(t,e,a,i,r)=>{const{lastCheckpoint:s,cummulativeWorkInLastCheckpoint:o,missingAtLastCheckpoint:c}=await(async(t,e,a,i)=>{const[r,s,o]=await i.query.xyk.liquidityMiningUser([t,e]);return new n(r.toString()).eq(new n(0))&&new n(s.toString()).eq(new n(0))&&new n(o.toString()).eq(new n(0))?{lastCheckpoint:a,cummulativeWorkInLastCheckpoint:d(0),missingAtLastCheckpoint:d(0)}:{lastCheckpoint:d(r.toString()),cummulativeWorkInLastCheckpoint:d(s.toString()),missingAtLastCheckpoint:d(o.toString())}})(t,a,i,r);return ut(e,i,new n(s.toString()),new n(o.toString()),new n(c.toString()))},dt=async(t,e,a,i)=>{const{lastCheckpoint:r,cummulativeWorkInLastCheckpoint:s,missingAtLastCheckpoint:o}=await(async(t,e,a)=>{const[i,r,s]=await a.query.xyk.liquidityMiningPool(t);return new n(i.toString()).eq(new n(0))&&new n(r.toString()).eq(new n(0))&&new n(s.toString()).eq(new n(0))?{lastCheckpoint:e,cummulativeWorkInLastCheckpoint:new n(0),missingAtLastCheckpoint:new n(0)}:{lastCheckpoint:new n(i.toString()),cummulativeWorkInLastCheckpoint:new n(r.toString()),missingAtLastCheckpoint:new n(s.toString())}})(e,a,i);return ut(t,a,new n(r.toString()),new n(s.toString()),new n(o.toString()))},wt=async(t,e,a,i)=>{const r=await t.rpc.chain.getBlock(),s=new n(r.block.header.number.toString()),o=s.add(new n(i)).div(new n(1e4)),c=s.div(new n(1e4)),u=await t.query.xyk.liquidityMiningActivePool(new n(e)),g=await(async(t,e,a,i)=>{const r=e,s=new n(0),o=t;return ut(t,a,new n(r.toString()),new n(s.toString()),new n(o.toString()))})(a,c,o),d=await dt(new n(u.toString()).add(a),e,o,t),w=await t.query.issuance.promotedPoolsRewards(e),l=new n(w.toString()),y=new n("136986000000000000000000"),m=i.div(new n(1200)),p=await t.query.issuance.promotedPoolsRewards.entries(),k=y.mul(m).div(new n(p.length)).add(l);let h=new n(0);return g.gt(new n(0))&&d.gt(new n(0))&&(h=k.mul(g).div(d)),h};class lt{api;urls;static instanceMap=new Map;constructor(t){this.urls=t,this.api=(async()=>await this.connectToNode(t))()}async connectToNode(t){const e=new c(t,5e3);return await s.create(u({provider:e,throwOnConnect:!0,throwOnUnknown:!0}))}static getInstance(t){return lt.instanceMap.has(JSON.stringify(t))||lt.instanceMap.set(JSON.stringify(t),new lt(t)),lt.instanceMap.get(JSON.stringify(t))}async getApi(){return this.api||(this.api=this.connectToNode(this.urls)),this.api}getUrls(){return this.urls}async waitForNewBlock(t){let e=0;const n=await this.getApi(),a=t||2;return new Promise((async t=>{const i=await n.rpc.chain.subscribeNewHeads((()=>{++e===a&&(i(),t(!0))}))}))}async getChain(){const t=await this.getApi();return y.getChain(t)}async getNodeName(){const t=await this.getApi();return y.getNodeName(t)}async getNodeVersion(){const t=await this.getApi();return y.getNodeVersion(t)}async getNonce(t){const e=await this.getApi();return J.getNonce(e,t)}async disconnect(){const t=await this.getApi();await t.disconnect()}async sendTokenFromParachainToMangata(t,e,n,a,i,r,s){const o=await this.getApi();return await K.sendTokenFromParachainToMangata(o,t,e,n,a,i,r,s)}async sendTokenFromMangataToParachain(t,e,n,a,i,r,s){const o=await this.getApi();return await K.sendTokenFromMangataToParachain(o,t,e,n,a,i,r,s)}async sendTokenFromParachainToMangataFee(t,e,n,a,i,r){const s=await this.getApi();return await ct.sendTokenFromParachainToMangataFee(s,t,e,n,a,i,r)}async sendTokenFromMangataToParachainFee(t,e,n,a,i,r){const s=await this.getApi();return await ct.sendTokenFromMangataToParachainFee(s,t,e,n,a,i,r)}async sendKusamaTokenFromRelayToParachain(t,e,n,a,i=2110,r){return await K.sendKusamaTokenFromRelayToParachain(t,e,n,a,i,r)}async sendKusamaTokenFromRelayToParachainFee(t,e,n,a,i=2110){return await ct.sendKusamaTokenFromRelayToParachainFee(t,e,n,a,i)}async sendKusamaTokenFromParachainToRelay(t,e,n,a){const i=await this.getApi();return await K.sendKusamaTokenFromParachainToRelay(i,t,e,n,a)}async sendKusamaTokenFromParachainToRelayFee(t,e,n){const a=await this.getApi();return await ct.sendKusamaTokenFromParachainToRelayFee(a,t,e,n)}async sendTurTokenFromTuringToMangata(t,e,n,a,i){const r=await this.getApi();return await K.sendTurTokenFromTuringToMangata(r,t,e,n,a,i)}async sendTurTokenFromMangataToTuring(t,e,n,a){const i=await this.getApi();return await K.sendTurTokenFromMangataToTuring(i,t,e,n,a)}async sendTurTokenFromTuringToMangataFee(t,e,n,a){const i=await this.getApi();return await ct.sendTurTokenFromTuringToMangataFee(i,t,e,n,a)}async sendTurTokenFromMangataToTuringFee(t,e,n){const a=await this.getApi();return await ct.sendTurTokenFromMangataToTuringFee(a,t,e,n)}async activateLiquidity(t,e,n,a){const i=await this.getApi();return await K.activateLiquidity(i,t,e,n,a)}async deactivateLiquidity(t,e,n,a){const i=await this.getApi();return await K.deactivateLiquidity(i,t,e,n,a)}async calculateFutureRewardsAmount(t,e,a){const i=await this.getApi();return await(async(t,e,a,i)=>{const r=await t.rpc.chain.getBlock(),s=new n(r.block.header.number.toString()).add(new n(i)).div(new n(1e4)),o=await t.query.xyk.liquidityMiningActiveUser([e,new n(a)]),c=await t.query.xyk.liquidityMiningActivePool(new n(a)),u=await gt(e,new n(o.toString()),a,s,t),g=await dt(new n(c.toString()),a,s,t),d=await t.query.xyk.liquidityMiningUserToBeClaimed([e,a]),w=await t.query.xyk.liquidityMiningUserClaimed([e,a]),l=await t.query.issuance.promotedPoolsRewards(a),y=new n(l.toString()),m=new n("136986000000000000000000"),p=i.div(new n(1200)),k=await t.query.issuance.promotedPoolsRewards.entries(),h=y.add(m.mul(p).div(new n(k.length)));let T=new n(0);return u.gt(new n(0))&&g.gt(new n(0))&&(T=h.mul(u).div(g)),T.add(new n(d.toString())).sub(new n(w.toString()))})(i,t,e,a)}async calculateFutureRewardsAmountForMinting(t,e,n){const a=await this.getApi();return await wt(a,t,e,n)}async calculateRewardsAmount(t,e){const n=await this.getApi();return await y.calculateRewardsAmount(n,t,e)}async claimRewardsFee(t,e,n){const a=await this.getApi();return await ct.claimRewardsFee(a,t,e,n)}async claimRewards(t,e,n,a){const i=await this.getApi();return await K.claimRewards(i,t,e,n,a)}async createPoolFee(t,e,n,a,i){const r=await this.getApi();return await ct.createPoolFee(r,t,e,n,a,i)}async createPool(t,e,n,a,i,r){const s=await this.getApi();return await K.createPool(s,t,e,n,a,i,r)}async sellAssetFee(t,e,n,a,i){const r=await this.getApi();return await ct.sellAssetFee(r,t,e,n,a,i)}async sellAsset(t,e,n,a,i,r){const s=await this.getApi();return await K.sellAsset(s,t,e,n,a,i,r)}async mintLiquidityFee(t,e,n,a,i){const r=await this.getApi();return await ct.mintLiquidityFee(r,t,e,n,a,i)}async mintLiquidity(t,e,n,a,i,r){const s=await this.getApi();return await K.mintLiquidity(s,t,e,n,a,i,r)}async burnLiquidityFee(t,e,n,a){const i=await this.getApi();return await ct.burnLiquidityFee(i,t,e,n,a)}async burnLiquidity(t,e,n,a,i){const r=await this.getApi();return await K.burnLiquidity(r,t,e,n,a,i)}async buyAssetFee(t,e,n,a,i){const r=await this.getApi();return await ct.buyAssetFee(r,t,e,n,a,i)}async buyAsset(t,e,n,a,i,r){const s=await this.getApi();return await K.buyAsset(s,t,e,n,a,i,r)}async calculateBuyPrice(t,e,n){const a=await this.getApi();return await y.calculateBuyPrice(a,t,e,n)}async calculateSellPrice(t,e,n){const a=await this.getApi();return await y.calculateSellPrice(a,t,e,n)}async getBurnAmount(t,e,n){const a=await this.getApi();return await y.getBurnAmount(a,t,e,n)}async calculateSellPriceId(t,e,n){const a=await this.getApi();return await y.calculateSellPriceId(a,t,e,n)}async calculateBuyPriceId(t,e,n){const a=await this.getApi();return await y.calculateBuyPriceId(a,t,e,n)}async getAmountOfTokenIdInPool(t,e){const n=await this.getApi();return await J.getAmountOfTokenIdInPool(n,t,e)}async getLiquidityTokenId(t,e){const n=await this.getApi();return await J.getLiquidityTokenId(n,t,e)}async getLiquidityPool(t){const e=await this.getApi();return await J.getLiquidityPool(e,t)}async transferTokenFee(t,e,n,a){const i=await this.getApi();return await ct.transferTokenFee(i,t,e,n,a)}async transferToken(t,e,n,a,i){const r=await this.getApi();return await K.transferToken(r,t,e,n,a,i)}async transferTokenAllFee(t,e,n){const a=await this.getApi();return await ct.transferAllTokenFee(a,t,e,n)}async transferTokenAll(t,e,n,a){const i=await this.getApi();return await K.transferAllToken(i,t,e,n,a)}async getTotalIssuance(t){const e=await this.getApi();return await J.getTotalIssuance(e,t)}async getTokenBalance(t,e){const n=await this.getApi();return await J.getTokenBalance(n,e,t)}async getNextTokenId(){const t=await this.getApi();return await J.getNextTokenId(t)}async getTokenInfo(t){const e=await this.getApi();return await J.getTokenInfo(e,t)}async getBlockNumber(){const t=await this.getApi();return await J.getBlockNumber(t)}async getOwnedTokens(t){const e=await this.getApi();return await J.getOwnedTokens(e,t)}async getLiquidityTokenIds(){const t=await this.getApi();return await J.getLiquidityTokenIds(t)}async getAssetsInfo(){const t=await this.getApi();return await J.getAssetsInfo(t)}async getBalances(){const t=await this.getApi();return await J.getBalances(t)}async getLiquidityTokens(){const t=await this.getApi();return await J.getLiquidityTokens(t)}async getPool(t){const e=await this.getApi();return await J.getPool(e,t)}async getInvestedPools(t){const e=await this.getApi();return await J.getInvestedPools(e,t)}async getPools(){const t=await this.getApi();return await J.getPools(t)}}const yt=(t,e)=>{const n=new RegExp(`^-?\\d+(?:\\.\\d{0,${e}})?`,"gm");return(t.match(n)?.[0]||t).match(/^-?0*(\d+(?:\.(?:(?!0+$)\d)+)?)/gm)?.[0]??t},mt=t=>{const e=+t;return!(!t||isNaN(Number(t))||isNaN(e)||e<0)};function pt(t){const{s0:e,s1:n,s2:a,s3:i}=function(t){return{s0:BigInt(t[0])<<BigInt(0)|BigInt(t[1])<<BigInt(8)|BigInt(t[2])<<BigInt(16)|BigInt(t[3])<<BigInt(24)|BigInt(t[4])<<BigInt(32)|BigInt(t[5])<<BigInt(40)|BigInt(t[6])<<BigInt(48)|BigInt(t[7])<<BigInt(56),s1:BigInt(t[8])<<BigInt(0)|BigInt(t[9])<<BigInt(8)|BigInt(t[10])<<BigInt(16)|BigInt(t[11])<<BigInt(24)|BigInt(t[12])<<BigInt(32)|BigInt(t[13])<<BigInt(40)|BigInt(t[14])<<BigInt(48)|BigInt(t[15])<<BigInt(56),s2:BigInt(t[16])<<BigInt(0)|BigInt(t[17])<<BigInt(8)|BigInt(t[18])<<BigInt(16)|BigInt(t[19])<<BigInt(24)|BigInt(t[20])<<BigInt(32)|BigInt(t[21])<<BigInt(40)|BigInt(t[22])<<BigInt(48)|BigInt(t[23])<<BigInt(56),s3:BigInt(t[24])<<BigInt(0)|BigInt(t[25])<<BigInt(8)|BigInt(t[26])<<BigInt(16)|BigInt(t[27])<<BigInt(24)|BigInt(t[28])<<BigInt(32)|BigInt(t[29])<<BigInt(40)|BigInt(t[30])<<BigInt(48)|BigInt(t[31])<<BigInt(56)}}(t);return new l(e,n,a,i)}class kt{static createKeyring(t){return new o({type:t})}static createKeyPairFromName(t,e=""){const n=e||"//testUser_"+w(),a=t.createFromUri(n);return t.addPair(a),a}static getXoshiro(t){return pt(t)}static getPriceImpact(t,e,n,a){if(!(t&&e&&mt(n)&&mt(a)))return;const i=t.firstTokenBalance,r=t.secondTokenBalance,s=st(n,e.firstTokenDecimals),o=st(a,e.secondTokenDecimals);if(o.gte(r))return"";const c=i.add(s).mul(P).mul(r),u=r.sub(o).mul(i),g=c.div(u).sub(P).toString(),w=d(g);return yt(w.div(W).toString(),2)}}export{et as BIG_BILLION,W as BIG_HUNDRED,at as BIG_HUNDRED_BILLIONS,tt as BIG_HUNDRED_MILLIONS,G as BIG_HUNDRED_THOUSAND,Q as BIG_MILLION,U as BIG_ONE,D as BIG_TEN,nt as BIG_TEN_BILLIONS,Y as BIG_TEN_MILLIONS,Z as BIG_TEN_THOUSAND,z as BIG_THOUSAND,it as BIG_TRILLION,j as BIG_ZERO,N as BN_BILLION,C as BN_DIV_NUMERATOR_MULTIPLIER,O as BN_DIV_NUMERATOR_MULTIPLIER_DECIMALS,x as BN_HUNDRED,R as BN_HUNDRED_BILLIONS,v as BN_HUNDRED_MILLIONS,B as BN_HUNDRED_THOUSAND,b as BN_MILLION,f as BN_ONE,S as BN_TEN,L as BN_TEN_BILLIONS,q as BN_TEN_MILLIONS,P as BN_TEN_THOUSAND,F as BN_THOUSAND,M as BN_TRILLION,I as BN_ZERO,lt as Mangata,kt as MangataHelpers,ot as fromBN,X as signTx,st as toBN,yt as toFixed};
