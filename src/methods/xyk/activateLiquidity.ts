import { ApiPromise } from "@polkadot/api";
import { SubmittableExtrinsic } from "@polkadot/api/types";
import { ISubmittableResult } from "@polkadot/types/types";
import { MangataGenericEvent } from "../../types/common";
import { signTx } from "../../utils/signTx";
import { Liquidity } from "../../types/xyk";

async function activateLiquidity(
  instancePromise: Promise<ApiPromise>,
  args: Liquidity,
  balanceFrom:
    | "AvailableBalance"
    | "StakedUnactivatedReserves"
    | "UnspentReserves",
  isForBatch: false
): Promise<MangataGenericEvent[]>;

async function activateLiquidity(
  instancePromise: Promise<ApiPromise>,
  args: Liquidity,
  balanceFrom:
    | "AvailableBalance"
    | "StakedUnactivatedReserves"
    | "UnspentReserves",
  isForBatch: true
): Promise<SubmittableExtrinsic<"promise", ISubmittableResult>>;

/**
 * @since 2.0.0
 * Activates liquidity for the given liquidity token ID and amount. Returns the events generated by the transaction.
 *
 * @param instancePromise - A Promise resolving to an `ApiPromise` instance.
 * @param args - The liquidity details for the transaction.
 * @param isForBatch - Whether the transaction is to be included in a batch.
 *
 * @returns If `isForBatch` is `true`, returns a `SubmittableExtrinsic` representing the transaction. If `isForBatch` is `false`, returns the events generated by the transaction.
 *
 * @throws Throws an error if signing the transaction fails.
 */

async function activateLiquidity(
  instancePromise: Promise<ApiPromise>,
  args: Liquidity,
  balanceFrom:
    | "AvailableBalance"
    | "StakedUnactivatedReserves"
    | "UnspentReserves",
  isForBatch: boolean
) {
  const api = await instancePromise;
  const { account, liquidityTokenId, amount, txOptions } = args;
  const tx = api.tx.proofOfStake.activateLiquidity(
    liquidityTokenId,
    amount,
    balanceFrom
  );
  return isForBatch ? tx : await signTx(api, tx, account, txOptions);
}

export { activateLiquidity };
